#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

&soft_off {
    hold-time-ms = <5000>;
};

#define QUICK_TAP_MS 175
#define KEYS_L 0 1 2 3 4 10 11 12 13 14 20 21 22 23 24 30 31 32 33 // left hand
#define KEYS_R 5 6 7 8 9 15 16 17 18 19 25 26 27 28 29 30 31 32 33 // right hand

/ {
    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <150>;
            quick-tap-ms = <0>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };
        lhm: homerow_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_R>;
            hold-trigger-on-release;
        };
        rhm: homerow_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <280>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <150>;
            bindings = <&kp>, <&kp>;
            hold-trigger-key-positions = <KEYS_L>;
            hold-trigger-on-release;
        };
        mo_kp: behavior_mo_tog {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&kp>;
        };
        td0: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp COMMA>, <&to 0>, <&to 1>;
        };
        td1: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp F10>, <&to 0>, <&to 1>;
        };
        td2: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&kp AT>, <&bt BT_CLR>, <&soft_off>;
        };
    };
    keymap {
        compatible = "zmk,keymap";

        // This is a sample keymap intended to be replaced with your own
        default_layer { // gallium homerow
            bindings = <
                &kp B &kp L       &kp D       &kp C        &kp V        &kp J          &kp F        &kp O        &kp U       &td0
                &kp N &lhm LALT R &hm LCTRL T &lhm LSHFT S &kp G        &kp Y          &rhm RSHFT H &rhm RCTRL A &rhm LALT E &kp I
                &kp X &kp Q       &kp M       &kp W        &kp Z        &kp K          &kp P        &kp SQT      &kp SEMI    &kp DOT
                                              &kp ESC      &mo_kp 2 TAB &mo_kp 1 SPACE &kp RET
            >;
        };
        function_layer {
            bindings = <
                &kp F1   &kp F2   &kp F3    &kp F4    &kp F5       &kp F6    &kp F7          &kp F8         &kp F9        &td1
                &kp LEFT &kp UP   &kp RIGHT &kp S     &kp G        &kp HOME  &rhm RSHFT BSPC &rhm RCTRL DEL &rhm LALT END &kp PSCRN
                &kp X    &kp DOWN &kp M     &kp W     &kp Z        &kp K     &kp P           &kp SQT        &kp F11       &kp F12
                                            &kp LGUI  &mo_kp 2 TAB &kp SPACE &kp RET
            >;
        };
        number_layer {
            bindings = <
                &kp N1   &kp N2   &kp N3    &kp N4     &kp N5    &kp N6         &kp N7           &kp N8           &kp N9        &kp N0
                &kp EXCL &kp UP   &kp LCTRL &kp LSHIFT &kp HASH  &kp HOME       &rhm RSHFT PG_DN &rhm RCTRL PG_UP &rhm LALT END &td2
                &kp LEFT &kp DOWN &kp RIGHT &kp DLLR   &kp PRCNT &kp CARET      &kp AMPS         &kp STAR         &kp TILDE     &kp PIPE
                                            &kp ESC    &kp TAB   &mo_kp 1 SPACE &kp RET
            >;
        };
    };
    combos {
        compatible = "zmk,combos";
        combo_bracket_left {
            timeout-ms = <60>;
            key-positions = <1 2>;
            bindings = <&kp LBKT>;
        };
        combo_bracket_right {
            timeout-ms = <50>;
            key-positions = <2 3>;
            bindings = <&kp RBKT>;
        };
        combo_paren_left {
            timeout-ms = <50>;
            key-positions = <6 7>;
            bindings = <&kp LPAR>;
        };
        combo_paren_right {
            timeout-ms = <60>;
            key-positions = <7 8>;
            bindings = <&kp RPAR>;
        };
        combo_minus {
            timeout-ms = <60>;
            key-positions = <21 22>;
            bindings = <&kp MINUS>;
        };
        combo_plus {
            timeout-ms = <50>;
            key-positions = <22 23>;
            bindings = <&kp EQUAL>;
        };
        combo_backslash {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp BSLH>;
        };
        combo_slash {
            timeout-ms = <60>;
            key-positions = <27 28>;
            bindings = <&kp FSLH>;
        };
        combo_grave {
            timeout-ms = <40>;
            key-positions = <14 24>;
            bindings = <&kp GRAVE>;
        };
        combo_bootloader1 {
            timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&bootloader>;
        };
        combo_bootloader2 {
            timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&bootloader>;
        };
    };
};
